
constants.dart:
(
const String BASE_URL = "http://192.168.18.45:3001/";

)

solicitarcita.dart:
(
import 'dart:convert';

SolicitarCita solicitarCitaFromJson(String str) => SolicitarCita.fromJson(json.decode(str));

String solicitarCitaToJson(SolicitarCita data) => json.encode(data.toJson());

class SolicitarCita {
  int idSolicitarCita;
  DateTime fecha;
  DateTime hora;
  String motivo;
  int pacienteId;

  SolicitarCita({
    required this.idSolicitarCita,
    required this.fecha,
    required this.hora,
    required this.motivo,
    required this.pacienteId,
  });

  factory SolicitarCita.fromJson(Map<String, dynamic> json) => SolicitarCita(
        idSolicitarCita: json["idSolicitarCita"],
        fecha: DateTime.parse(json["fecha"]),
        hora: DateTime.parse(json["hora"]),
        motivo: json["motivo"],
        pacienteId: json["pacienteId"],
      );

  Map<String, dynamic> toJson() => {
        "idSolicitarCita": idSolicitarCita,
        "fecha": fecha.toIso8601String(),
        "hora": hora.toIso8601String(),
        "motivo": motivo,
        "pacienteId": pacienteId,
      };
}

)

Usuario.dart:
(
import 'dart:convert';

Usuario usuarioFromJson(String str) => Usuario.fromJson(json.decode(str));

String usuarioToJson(Usuario data) => json.encode(data.toJson());

class Usuario {
  int id;
  String nombre;
  String apellido;
  String correo;
  String DNI;
  String numeroCelular;
  String contrasena;
  DateTime? fechaNacimiento;
  String rol;

  // Constructor vacío para inicialización predeterminada
  Usuario.empty()
      : id = 0,
        nombre = '',
        apellido = '',
        correo = '',
        DNI = '',
        numeroCelular = '',
        contrasena = '',
        fechaNacimiento = null,
        rol = 'Paciente'; // Por defecto, 'Paciente'

  Usuario({
    required this.id,
    required this.nombre,
    required this.apellido,
    required this.correo,
    required this.DNI,
    required this.numeroCelular,
    required this.contrasena,
    this.fechaNacimiento,
    required this.rol,

  });

  // Método copyWith para actualizar campos específicos
  Usuario copyWith({
    int? id,
    String? nombre,
    String? apellido,
    String? correo,
    String? DNI,
    String? numeroCelular,
    String? contrasena,
    DateTime? fechaNacimiento,
    String? rol,
  }) {
    return Usuario(
      id: id ?? this.id,
      nombre: nombre ?? this.nombre,
      apellido: apellido ?? this.apellido,
      correo: correo ?? this.correo,
      DNI: DNI ?? this.DNI,
      numeroCelular: numeroCelular ?? this.numeroCelular,
      contrasena: contrasena ?? this.contrasena,
      fechaNacimiento: fechaNacimiento ?? this.fechaNacimiento,
      rol: rol ?? this.rol,
    );
  }

  // Método para crear un objeto Usuario desde JSON
  factory Usuario.fromJson(Map<String, dynamic> json) => Usuario(
        id: json["id_usuario"],
        nombre: json["nombre"],
        apellido: json["apellido"],
        correo: json["correo"],
        DNI: json["DNI"],
        numeroCelular: json["NumCelular"],
        contrasena: json["contrasena"],
        fechaNacimiento: json["fecha_nacimiento"] != null
            ? DateTime.parse(json["fecha_nacimiento"])
            : null,
        rol: json["rol"], // Agregar el rol desde el JSON
      );

  // Método para convertir un objeto Usuario a JSON
  Map<String, dynamic> toJson() => {
        "id_usuario": id,
        "nombre": nombre,
        "apellido": apellido,
        "correo": correo,
        "DNI": DNI,
        "NumCelular": numeroCelular,
        "contrasena": contrasena,
        "fecha_nacimiento": fechaNacimiento?.toIso8601String(),
        "rol": rol,  // Agregar el rol al JSON

      };

  @override
  String toString() {
    return 'Usuario -> id: $id, nombre: $nombre, apellido: $apellido, correo: $correo, DNI: $DNI, numeroCelular: $numeroCelular, contrasena: $contrasena, rol: $rol';
  }
}

)

especialista.dart:
(
import 'dart:convert';

Especialista especialistaFromJson(String str) => Especialista.fromJson(json.decode(str));

String especialistaToJson(Especialista data) => json.encode(data.toJson());

class Especialista {
  int id;
  String especialidad;
  int psicologoGeneralId;

  // Constructor vacío para inicialización predeterminada
  Especialista.empty()
      : id = 0,
        especialidad = '',
        psicologoGeneralId = 0;

  Especialista({
    required this.id,
    required this.especialidad,
    required this.psicologoGeneralId,
  });

  // Método copyWith para actualizar campos específicos
  Especialista copyWith({
    int? id,
    String? especialidad,
    int? psicologoGeneralId,
  }) {
    return Especialista(
      id: id ?? this.id,
      especialidad: especialidad ?? this.especialidad,
      psicologoGeneralId: psicologoGeneralId ?? this.psicologoGeneralId,
    );
  }

  // Método para crear un objeto Especialista desde JSON
  factory Especialista.fromJson(Map<String, dynamic> json) => Especialista(
        id: json["id_especialista"],
        especialidad: json["especialidad"],
        psicologoGeneralId: json["psicologoGeneral_id_psicologogeneral"],
      );

  // Método para convertir un objeto Especialista a JSON
  Map<String, dynamic> toJson() => {
        "id_especialista": id,
        "especialidad": especialidad,
        "psicologoGeneral_id_psicologogeneral": psicologoGeneralId,
      };

  @override
  String toString() {
    return 'Especialista -> id: $id, especialidad: $especialidad, psicologoGeneralId: $psicologoGeneralId';
  }
}

)

paciente.dart:
(
import 'dart:convert';

Paciente pacienteFromJson(String str) => Paciente.fromJson(json.decode(str));

String pacienteToJson(Paciente data) => json.encode(data.toJson());

class Paciente {
  int idPaciente;
  int usuarioId;

  Paciente({
    required this.idPaciente,
    required this.usuarioId,
  });

  factory Paciente.fromJson(Map<String, dynamic> json) => Paciente(
        idPaciente: json["idPaciente"],
        usuarioId: json["Usuario_id_usuario"],
      );

  Map<String, dynamic> toJson() => {
        "idPaciente": idPaciente,
        "Usuario_id_usuario": usuarioId,
      };
}

)

homepaciente_page.dart:
(
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:psicoapp/models/Usuario.dart';
import 'package:psicoapp/screens/CHATIO/chatwid.dart';
import 'package:psicoapp/screens/Cuestionario/CuestionarioPage.dart';
import 'package:psicoapp/screens/Solicitar_Cita/Solicitar_Cita_page.dart';
import 'package:psicoapp/screens/Home/Home_Paciente/prueba.dart';
import 'package:psicoapp/screens/profile/psicologo/doctor_page.dart';
import 'package:psicoapp/screens/profile/paciente/userprofile_page.dart';
import 'homepaciente_controller.dart';

class ContactSpecialistPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Color(0xFF112244), // Fondo azul oscuro
      appBar: AppBar(
        elevation: 0, // Sin sombra
        backgroundColor: Color(0xFF112244), // Fondo del AppBar igual al fondo
        automaticallyImplyLeading: true, // Mostrar el ícono de retroceso
        centerTitle: true, // Centrar el ícono
        title: Icon(
          Icons.sentiment_satisfied_alt, // Ícono de la carita
          color: Colors.white,
          size: 28,
        ),
        actions: [
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: CircleAvatar(
              radius: 15,
              backgroundImage: NetworkImage(
                  'https://randomuser.me/api/portraits/women/44.jpg'), // Imagen de perfil
            ),
          ),
        ],
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Estás a punto de contactar a un especialista en salud mental',
              style: TextStyle(
                color: Colors.white,
                fontSize: 18,
              ),
              textAlign: TextAlign.center,
            ),
            SizedBox(height: 40), // Espacio entre el texto y los botones
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green, // Fondo verde
                foregroundColor: Colors.white, // Texto blanco
                minimumSize: Size(200, 50), // Tamaño del botón
              ),
              onPressed: () {
                // Acción al confirmar
                print("Confirmar contacto con especialista");
              },
              child: Text('CONFIRMAR'),
            ),
            SizedBox(height: 20), // Espacio entre los botones
            ElevatedButton(
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red, // Fondo rojo
                foregroundColor: Colors.white, // Texto blanco
                minimumSize: Size(200, 50), // Tamaño del botón
              ),
              onPressed: () {
                // Regresar a la pantalla anterior
                Navigator.pop(context);
              },
              child: Text('CANCELAR'),
            ),
          ],
        ),
      ),
    );
  }
}

class HomePacientePage extends StatefulWidget {
  final Usuario usuarioLogged;

  const HomePacientePage({Key? key, required this.usuarioLogged}) : super(key: key);

  @override
  _HomePacientePageState createState() => _HomePacientePageState(usuarioLogged: usuarioLogged);
}

class _HomePacientePageState extends State<HomePacientePage> {
  final Usuario usuarioLogged;
  HomePacienteController control = Get.put(HomePacienteController());
  int _selectedIndex = 0;

  late String roomId;
  late String userId;

  late final List<Widget> _widgetOptions;

  bool _notificationsEnabled = true;
  bool _agendaEnabled = false;
  bool _monitoringEnabled = true;

  _HomePacientePageState({required this.usuarioLogged});

  @override
  void initState() {
    super.initState();
    userId = usuarioLogged.id.toString(); // Establece el userId basado en el usuario autenticado.
    roomId = 'chat_${usuarioLogged.id}';  // Genera un roomId único.

    // Definir las pantallas a mostrar en el BottomNavigationBar
    _widgetOptions = [
      SolicitarCitaPage(usuarioLogged),
      CuestionarioScreen(),
      UsuarioProfilePage(usuario: usuarioLogged), // Perfil del usuario logueado
      DoctorProfilePage(doctorId: usuarioLogged.id) // Se asume que el id del usuario es el del doctor en este caso
    ];
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  // Crear el Drawer (menú lateral)
  Widget _buildDrawer() {
    return Drawer(
      child: Container(
        color: Color(0xFF112244), // Color de fondo del Drawer
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            SizedBox(height: 20), // Espacio en la parte superior
            // ExpansionTile para Notificaciones
            ExpansionTile(
              leading: Icon(Icons.notifications, color: Colors.white),
              title: Text('Notificaciones',
                  style: TextStyle(color: Colors.white)),
              children: <Widget>[
                ListTile(
                  title: Text('Activar Notificaciones',
                      style: TextStyle(color: Colors.white)),
                  trailing: Switch(
                    value: _notificationsEnabled,
                    onChanged: (value) {
                      setState(() {
                        _notificationsEnabled = value;
                      });
                    },
                  ),
                  subtitle: Text(_notificationsEnabled ? 'Activado' : 'Desactivado',
                      style: TextStyle(color: Colors.grey)),
                ),
                ListTile(
                  title: Text('Tono de notificación',
                      style: TextStyle(color: Colors.white)),
                  trailing: Icon(Icons.arrow_drop_down, color: Colors.white),
                  subtitle: Text('Latido de corazón',
                      style: TextStyle(color: Colors.grey)),
                  onTap: () {
                    // Implementar la selección de tono
                  },
                ),
                ListTile(
                  title: Text('Agenda', style: TextStyle(color: Colors.white)),
                  trailing: Switch(
                    value: _agendaEnabled,
                    onChanged: (value) {
                      setState(() {
                        _agendaEnabled = value;
                      });
                    },
                  ),
                  subtitle:
                      Text(_agendaEnabled ? 'Activado' : 'Desactivado',
                          style: TextStyle(color: Colors.grey)),
                ),
                ListTile(
                  title: Text('Monitoreo emocional',
                      style: TextStyle(color: Colors.white)),
                  trailing: Switch(
                    value: _monitoringEnabled,
                    onChanged: (value) {
                      setState(() {
                        _monitoringEnabled = value;
                      });
                    },
                  ),
                  subtitle: Text(
                      _monitoringEnabled ? 'Activado' : 'Desactivado',
                      style: TextStyle(color: Colors.grey)),
                ),
              ],
            ),
            Divider(color: Colors.white24, thickness: 1), // Línea divisora
            ListTile(
              leading: Icon(Icons.security, color: Colors.white),
              title: Text('Seguridad', style: TextStyle(color: Colors.white)),
              onTap: () {
                // Acción al pulsar
              },
            ),
            Divider(color: Colors.white24, thickness: 1), // Línea divisora
            ListTile(
              leading: Icon(Icons.article, color: Colors.white),
              title: Text('Términos y condiciones',
                  style: TextStyle(color: Colors.white)),
              onTap: () {
                // Acción al pulsar
              },
            ),
            Divider(color: Colors.white24, thickness: 1), // Línea divisora
            ListTile(
              leading: Icon(Icons.privacy_tip, color: Colors.white),
              title: Text('Política de privacidad',
                  style: TextStyle(color: Colors.white)),
              onTap: () {
                // Acción al pulsar
              },
            ),
            Divider(color: Colors.white24, thickness: 1), // Línea divisora
            ListTile(
              leading: Icon(Icons.error_outline, color: Colors.white),
              title: Text('Informar de un error',
                  style: TextStyle(color: Colors.white)),
              onTap: () {
                // Acción al pulsar
              },
            ),
            Spacer(), // Empuja el contenido hacia arriba para dejar espacio
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: ElevatedButton(
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.red, // Fondo rojo para el botón
                  foregroundColor: Colors.white, // Texto en blanco
                  minimumSize: Size(double.infinity, 50), // Tamaño ancho completo
                ),
                onPressed: () {
                  // Redirigir a la pantalla de confirmación
                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => ContactSpecialistPage(),
                    ),
                  );
                },
                child: Text('Contacta a un especialista'),
              ),
            ),
            SizedBox(height: 20), // Espacio debajo del botón
            Center(
              child: TextButton(
                onPressed: () {
                  // Redirigir a la pantalla de inicio de sesión
                  control.goToLogIn(context);
                },
                child: Text('Cerrar sesión',
                    style: TextStyle(color: Colors.white)),
              ),
            ),
            SizedBox(height: 20), // Espacio adicional para que quede alineado
          ],
        ),
      ),
    );
  }

  // Actualizar los iconos del BottomNavigationBar
  Widget _navigationBottom() {
    return BottomNavigationBar(
      items: const <BottomNavigationBarItem>[
        BottomNavigationBarItem(
          icon: Icon(Icons.star_border), // Ícono de estrella
          label: '',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.photo_camera_outlined), // Ícono de cámara
          label: '',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.chat_bubble_outline), // Ícono de chat
          label: '',
        ),
        BottomNavigationBarItem(
          icon: Icon(Icons.person_outline), // Ícono de perfil
          label: '',
        ),
      ],
      currentIndex: _selectedIndex,
      selectedItemColor: Color(0XFFF26F29), // Color seleccionado
      unselectedItemColor: Colors.black, // Color de los íconos no seleccionados
      backgroundColor: Colors.white, // Fondo blanco
      showSelectedLabels: false, // Sin etiquetas
      showUnselectedLabels: false, // Sin etiquetas
      onTap: _onItemTapped,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        elevation: 0, // Sin sombra
        backgroundColor: Colors.white, // Fondo blanco para el AppBar
        automaticallyImplyLeading: false,
        leading: Builder(
          builder: (context) => IconButton(
            icon: Icon(Icons.menu, color: Colors.black),
            onPressed: () => Scaffold.of(context).openDrawer(), // Abre el Drawer
          ),
        ),
        centerTitle: true, // Carita sonriente centrada
        title: Icon(
          Icons.sentiment_satisfied_alt, // Ícono de carita sonriente
          color: Colors.black,
          size: 28, // Tamaño ajustado al mockup
        ),
        actions: [
          IconButton(
            icon: Icon(Icons.notifications_none, color: Colors.black),
            onPressed: () {
              print("Abrir notificaciones");
            },
          ),
          // Dentro de las acciones en AppBar
          GestureDetector(
            onTap: () {
              // Al hacer clic en la imagen, ir al perfil del usuario
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => UsuarioProfilePage(usuario: usuarioLogged), // Pasar los datos del usuario
                ),
              );
            },
            child: CircleAvatar(
              radius: 15,
              backgroundImage: NetworkImage(
                'https://randomuser.me/api/portraits/women/44.jpg', // URL de la imagen de perfil
              ),
            ),
          ),

        ],
      ),
      drawer: _buildDrawer(), // Drawer como menú lateral
      body: _widgetOptions.elementAt(_selectedIndex), // Contenido del body
      bottomNavigationBar: _navigationBottom(), // Barra de navegación inferior
    );
  }
}

)

homepaciente_controller.dart:
(
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:psicoapp/screens/Auth/Login/login_page.dart';

class HomePacienteController extends GetxController {
  // Definir el método goToSignIn para redirigir a la pantalla de inicio de sesión
  void goToLogIn(BuildContext context) {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => LoginPage(), // Redirigir a la página de inicio de sesión
      ),
    );
  }
}

)

Solicitar_Cita_page.dart:
(
import 'package:flutter/material.dart';
import 'dart:math';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:psicoapp/models/Usuario.dart';
import 'package:psicoapp/screens/Solicitar_Cita/Solicitar_Cita_controller.dart';
 // Importa el modelo de Usuario

class SolicitarCitaPage extends StatelessWidget {
  final SolicitarCitaController control = Get.put(SolicitarCitaController());
  final Usuario usuarioLogged; // Declaración de la variable usuario

  // Constructor que recibe el usuario
  SolicitarCitaPage(this.usuarioLogged) {
    control.user = usuarioLogged; // Asignar el usuario al controlador
  }

  @override
  Widget build(BuildContext context) {
    // Revisamos si es de día o de noche
    control.checkDayTime();

    return Scaffold(
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Aquí construimos el calendario de eventos
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Obx(() {
                // Si no hay ninguna cita registrada
                if (control.selectedDateTime.value == null) {
                  return buildReservationCard(context);
                } else {
                  return buildScheduledCard(context);
                }
              }),
            ),

            // Parte 3: Gráfica circular y emociones
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  // Gráfico circular (emoción principal)
                  Stack(
                    alignment: Alignment.center,
                    children: [
                      Container(
                        width: 180,
                        height: 180,
                        child: CustomPaint(
                          painter: PieChartPainter(),
                        ),
                      ),
                      Column(
                        children: [
                          Icon(Icons.sentiment_dissatisfied, size: 100, color: Colors.blue),
                         
                        ],
                      ),
                    ],
                  ),
                  SizedBox(width: 20),
                  // Lista de emociones
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      buildEmotionIndicator(Colors.green, '15%', Icons.sentiment_very_satisfied),
                      SizedBox(height: 8),
                      buildEmotionIndicator(Colors.yellow, '10%', Icons.sentiment_satisfied),
                      SizedBox(height: 8),
                      buildEmotionIndicator(Colors.purple, '22%', Icons.sentiment_neutral),
                      SizedBox(height: 8),
                      buildEmotionIndicator(Colors.blue, '30%', Icons.sentiment_dissatisfied),
                      SizedBox(height: 8),
                      buildEmotionIndicator(Colors.red, '5%', Icons.sentiment_very_dissatisfied),
                    ],
                  ),
                ],
              ),
            ),
            SizedBox(height: 24),

            // Gráfico circular de progreso
            Center(
              child: Stack(
                alignment: Alignment.center,
                children: [
                  Container(
                    width: 180,
                    height: 180,
                    child: CircularProgressIndicator(
                      value: 0.8,
                      strokeWidth: 12,
                      backgroundColor: Colors.grey[300],
                      color: Colors.blue,
                    ),
                  ),
                  Column(
                    children: [
                      Text(
                        "80%",
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                          color: Colors.blue,
                        ),
                      ),
                      Text(
                        "Nivel de progreso",
                        style: TextStyle(
                          fontSize: 16,
                          color: Colors.grey[600],
                        ),
                      ),
                    ],
                  ),
                ],
              ),
            ),
            SizedBox(height: 24),

// Parte 4: Sugerencias para ti (Tarjetas)
Padding(
  padding: const EdgeInsets.all(16.0),
  child: Text(
    'Sugerencias para ti',
    style: TextStyle(
      fontSize: 20,
      fontWeight: FontWeight.bold,
      color: Colors.black87,
    ),
  ),
),
Center(  // Asegura que todo el contenido esté centrado
  child: Padding(
    padding: const EdgeInsets.symmetric(horizontal: 16.0),
    child: Wrap(
      alignment: WrapAlignment.center, // Centra los elementos dentro del Wrap
      spacing: 16,
      runSpacing: 16,
      children: [
        buildSuggestionCard('Tips para un ambiente laboral sano',
            'assets/images/laboral.png'),
        buildSuggestionCard(
            'Ser productivo sin desgastarse', 'assets/images/productivo.png'),
        buildSuggestionCard('Importancia de una buena alimentación',
            'assets/images/alimentacion.png'),
        buildSuggestionCard(
            '5 tips de meditación para tu tiempo libre', 'assets/images/meditacion.png'),
      ],
    ),
  ),
),
SizedBox(height: 24),

          ],
        ),
      ),
    );
  }

  // Widget para la tarjeta de reserva de cita
  Widget buildReservationCard(BuildContext context) {
    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 4,
      child: Container(
        padding: EdgeInsets.all(16),
        width: 350,
        height: 200,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.yellow[100]!, Colors.white],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Sin Eventos',
                        style: TextStyle(
                          color: Colors.black87,
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      SizedBox(height: 4),
                      Text(
                        'CPI-Válidamente',
                        style: TextStyle(
                          color: Colors.black54,
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
                Obx(() => Icon(
                      control.isDayTime.value ? Icons.wb_sunny : Icons.nights_stay,
                      color: control.isDayTime.value ? Colors.yellow : Colors.blue,
                      size: 50,
                    )),
              ],
            ),
            Spacer(),
            Center(
              child: ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.black,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(20),
                    ),
                  ),
                  onPressed: () => control.selectDateTime(context), // Llamar a la selección de fecha, hora y motivo
                  child: Text('Reservar Cita'),
                ),

            ),
          ],
        ),
      ),
    );
  }

  // Widget para la tarjeta de la cita agendada
  Widget buildScheduledCard(BuildContext context) {
    return Card(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      elevation: 4,
      child: Container(
        padding: EdgeInsets.all(16),
        width: 350,
        height: 200,
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.yellow[100]!, Colors.white],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
          borderRadius: BorderRadius.circular(16),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Diagnóstico Psicológico',
                        style: TextStyle(
                          color: Colors.black87,
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      SizedBox(height: 4),
                      Text(
                        'Primera Sesión',
                        style: TextStyle(
                          color: Colors.black54,
                          fontSize: 12,
                        ),
                      ),
                    ],
                  ),
                ),
                Obx(() => Icon(
                      control.isDayTime.value ? Icons.wb_sunny : Icons.nights_stay,
                      color: control.isDayTime.value ? Colors.yellow : Colors.blue,
                      size: 50,
                    )),
              ],
            ),
            Spacer(),
            Text(
              DateFormat('hh:mm a').format(control.selectedDateTime.value!),
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            Spacer(),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                TextButton(
                  onPressed: () => control.rescheduleCita(context),
                  child: Text(
                    'Reagendar',
                    style: TextStyle(color: Colors.black),
                  ),
                ),
                TextButton(
                  onPressed: () {
                    control.selectedDateTime.value = null;
                  },
                  child: Text(
                    'Cancelar Cita',
                    style: TextStyle(color: Colors.red),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  // Widget para crear una tarjeta de sugerencia
Widget buildSuggestionCard(String title, String assetPath) {
  return Container(
    width: 160,
    height: 160,
    decoration: BoxDecoration(
      borderRadius: BorderRadius.circular(12),
      image: DecorationImage(
        image: AssetImage(assetPath),
        fit: BoxFit.cover,
      ),
    ),
    child: Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(12),
        gradient: LinearGradient(
          colors: [Colors.black54, Colors.transparent],
          begin: Alignment.bottomCenter,
          end: Alignment.topCenter,
        ),
      ),
      padding: EdgeInsets.all(8),
      alignment: Alignment.bottomCenter, // Centrar contenido en la parte inferior
      child: Column(
        mainAxisAlignment: MainAxisAlignment.end, // Asegura que el texto esté en la parte inferior
        crossAxisAlignment: CrossAxisAlignment.center, // Centra horizontalmente
        children: [
          Spacer(), // Añade espacio flexible para empujar el contenido hacia el centro
          Text(
            title,
            textAlign: TextAlign.center, // Centra el texto
            style: TextStyle(
              color: Colors.white,
              fontSize: 14,
              fontWeight: FontWeight.bold,
            ),
          ),
        ],
      ),
    ),
  );
}

  // Widget para crear un ítem de emoción
  Widget buildEmotionIndicator(Color color, String percentage, IconData icon) {
    return Row(
      children: [
        Icon(icon, color: color, size: 24),
        SizedBox(width: 8),
        Text(
          percentage,
          style: TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.bold,
            color: Colors.black,
          ),
        ),
      ],
    );
  }
}

// Clase personalizada para la gráfica circular de emociones
class PieChartPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    double width = size.width;
    double height = size.height;
    Offset center = Offset(width / 2, height / 2);
    double radius = width / 2;

    Paint paint = Paint()..style = PaintingStyle.stroke..strokeWidth = 30;

    double startAngle = -90;
    final angles = [54, 36, 79.2, 108, 72]; // Los porcentajes convertidos en ángulos

    // Colores que representan las emociones
    final colors = [
      Colors.green,
      Colors.yellow,
      Colors.purple,
      Colors.blue,
      Colors.red,
    ];

    for (int i = 0; i < angles.length; i++) {
      final sweepAngle = angles[i].toDouble(); // Conversión explícita a double
      paint.color = colors[i];
      canvas.drawArc(
        Rect.fromCircle(center: center, radius: radius),
        degreesToRadians(startAngle),
        degreesToRadians(sweepAngle),
        false,
        paint,
      );
      startAngle += sweepAngle;
    }
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return false;
  }

  double degreesToRadians(double degrees) {
    return degrees * (pi / 180);
  }
}

)

Solicitar_Cita_controller.dart:
(
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:psicoapp/models/Usuario.dart';
import 'package:psicoapp/services/solicitarcita_service.dart'; // Importamos el servicio de citas

class SolicitarCitaController extends GetxController {
  Usuario user = Usuario.empty();
  Rx<DateTime?> selectedDateTime = Rx<DateTime?>(null);
  RxString eventTitle = 'Reservar una Cita'.obs;
  RxBool isDayTime = true.obs;
  RxString motivo = ''.obs;

  // Aquí cambiamos a RxnInt para permitir valores nulos
  RxnInt citaId = RxnInt(null); 

  List<String> motivosDisponibles = ['Ansiedad', 'Depresión', 'Baja Autoestima'];
  RxString selectedMotivo = ''.obs;

  void checkDayTime() {
    int currentHour = DateTime.now().hour;
    isDayTime.value = currentHour >= 6 && currentHour < 18;
  }

  Future<void> selectDateTime(BuildContext context) async {
    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: DateTime.now(),
      firstDate: DateTime.now(),
      lastDate: DateTime(2101),
    );
    if (pickedDate != null) {
      final TimeOfDay? pickedTime = await showTimePicker(
        context: context,
        initialTime: TimeOfDay.now(),
      );
      if (pickedTime != null) {
        selectedDateTime.value = DateTime(
          pickedDate.year,
          pickedDate.month,
          pickedDate.day,
          pickedTime.hour,
          pickedTime.minute,
        );
        eventTitle.value = 'Diagnóstico Psicológico - Primera Sesión';
        showMotivoDialog(context);
      }
    }
  }

  void showMotivoDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Seleccione el motivo de la cita'),
          content: Obx(() {
            return DropdownButton<String>(
              isExpanded: true,
              value: selectedMotivo.value.isEmpty ? null : selectedMotivo.value,
              hint: Text('Seleccione un motivo'),
              items: motivosDisponibles.map((String motivo) {
                return DropdownMenuItem<String>(
                  value: motivo,
                  child: Text(motivo),
                );
              }).toList(),
              onChanged: (String? newValue) {
                selectedMotivo.value = newValue ?? '';
              },
            );
          }),
          actions: [
            TextButton(
              child: Text('Cancelar'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: Text('Confirmar'),
              onPressed: () {
                motivo.value = selectedMotivo.value;
                Navigator.of(context).pop();
                if (citaId.value != null) {
                  updateCita(); // Actualiza la cita existente
                } else {
                  submitCita(); // Crea una nueva cita
                }
              },
            ),
          ],
        );
      },
    );
  }

  // Método para crear una nueva cita
  Future<void> submitCita() async {
    if (selectedDateTime.value != null && motivo.value.isNotEmpty) {
      DateTime fechaHora = selectedDateTime.value!;
      int pacienteId = user.id;

      print({
        "pacienteId": pacienteId,
        "fechaHora": fechaHora,
        "motivo": motivo.value,
      });

      bool success = await CitaService().createCita(pacienteId, fechaHora, motivo.value);

      if (success) {
        Get.snackbar('Éxito', 'Cita reservada correctamente');
      } else {
        Get.snackbar('Error', 'No se pudo reservar la cita');
      }
    }
  }


   Future<void> agendarCita(
      DateTime fecha, TimeOfDay hora, String motivo, int pacienteId) async {
    String url = "http://tu_backend_url/api/agendarCitaYGenerarSesion"; // URL del backend

    try {
      final response = await http.post(
        Uri.parse(url),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "fecha": fecha.toIso8601String(),
          "hora": hora.format(context), // Formatear la hora
          "motivo": motivo,
          "Paciente_idPaciente": pacienteId,
        }),
      );

      if (response.statusCode == 201) {
        print('Cita y sesión creadas: ${response.body}');
      } else {
        print('Error: ${response.body}');
      }
    } catch (e) {
      print('Error al agendar cita: $e');
    }
  }

  // Método para actualizar una cita existente
  Future<void> updateCita() async {
    if (selectedDateTime.value != null && motivo.value.isNotEmpty && citaId.value != null) {
      DateTime fechaHora = selectedDateTime.value!;
      int pacienteId = user.id;

      print({
        "citaId": citaId.value,
        "pacienteId": pacienteId,
        "fechaHora": fechaHora,
        "motivo": motivo.value,
      });

      bool success = await CitaService().updateCita(citaId.value!, pacienteId, fechaHora, motivo.value);

      if (success) {
        Get.snackbar('Éxito', 'Cita reagendada correctamente');
      } else {
        Get.snackbar('Error', 'No se pudo reagendar la cita');
      }
    }
  }

  Future<void> rescheduleCita(BuildContext context) async {
    await selectDateTime(context);
  }
}


)

user_service.dart:
(
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:psicoapp/configs/constants.dart';
import '../models/Usuario.dart';

class UserService {
  Future<Usuario?> validate(String email, String password) async {
    String url = "${BASE_URL}usuarios/validate";

    try {
      // Enviar solicitud POST usando http.post
      var response = await http.post(
        Uri.parse(url),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "correo": email,
          "contrasena": password
        }),
      );

      // Verificar si el código de estado es 200 (éxito)
      if (response.statusCode == 200) {
        var responseBody = json.decode(response.body);

        // Convertir la respuesta a un objeto Usuario
        final Usuario usuario = Usuario.fromJson(responseBody);
        return usuario;
      } else if (response.statusCode == 404) {
        // Si no se encuentra el usuario
        return null;
      } else {
        print('Error de validación: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('Error no esperado: $e');
      return null;
    }
  }

  Future<Usuario?> updateUsuario(Usuario usuario, {String? imagePath}) async {
    String url = "${BASE_URL}usuarios/${usuario.id}";
    
    // Si se sube una imagen, utilizamos Multipart para enviar tanto los datos del usuario como la imagen
    if (imagePath != null && imagePath.isNotEmpty) {
      var request = http.MultipartRequest('PUT', Uri.parse(url));
      request.fields['nombre'] = usuario.nombre;
      request.fields['apellido'] = usuario.apellido;
      request.fields['correo'] = usuario.correo;
      request.fields['numeroCelular'] = usuario.numeroCelular;
      request.fields['DNI'] = usuario.DNI;
      
      // Agregar la imagen como parte del cuerpo de la solicitud
      request.files.add(await http.MultipartFile.fromPath('image', imagePath));
      
      try {
        var response = await request.send();
        if (response.statusCode == 200) {
          var responseBody = await response.stream.bytesToString();
          final updatedUsuario = Usuario.fromJson(json.decode(responseBody));
          return updatedUsuario;
        } else {
          print('Error al actualizar el usuario!');
          return null;
        }
      } catch (e, stackTrace) {
        print('Error no esperado: $e');
        print(stackTrace);
        return null;
      }
    } else {
      // Si no hay imagen, enviamos los datos con PUT directamente
      try {
        var response = await http.put(
          Uri.parse(url),
          headers: {"Content-Type": "application/json"},
          body: jsonEncode({
            "nombre": usuario.nombre,
            "apellido": usuario.apellido,
            "correo": usuario.correo,
            "numeroCelular": usuario.numeroCelular,
            "DNI": usuario.DNI,
          }),
        );

        if (response.statusCode == 200) {
          var responseBody = json.decode(response.body);
          final updatedUsuario = Usuario.fromJson(responseBody);
          return updatedUsuario;
        } else {
          print('Error al actualizar el usuario!');
          return null;
        }
      } catch (e) {
        print('Error no esperado: $e');
        return null;
      }
    }
  }

Future<Usuario?> register(
    String nombre,
    String apellido,
    String correo,
    String dni,
    String numeroCelular,
    String contrasena,
    DateTime fechaNacimiento,
    String rol, {
    String? especialidad,  // Parámetro opcional
  }) async {
    String url = "${BASE_URL}usuarios";  // Ruta para crear un usuario

    try {
      var response = await http.post(
        Uri.parse(url),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "nombre": nombre,
          "apellido": apellido,
          "correo": correo,
          "DNI": dni,
          "NumCelular": numeroCelular,
          "contrasena": contrasena,
          "fecha_nacimiento": fechaNacimiento.toIso8601String(),
          "rol": rol,
          if (especialidad != null) "especialidad": especialidad,  // Enviar especialidad solo si es psicólogo
        }),
      );

      if (response.statusCode == 201) {
        var responseBody = json.decode(response.body);
        return Usuario.fromJson(responseBody);
      } else {
        print('Error de registro: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('Error inesperado: $e');
      return null;
    }
  }



  Future<String?> reset(String dni, String email) async {
    String url = "${BASE_URL}user/reset";
    var request = http.MultipartRequest('POST', Uri.parse(url));
    request.fields['dni'] = dni;
    request.fields['email'] = email;
    try {
      var response = await request.send();
      print(response.statusCode);
      if (response.statusCode == 200) {
        var responseBody = await response.stream.bytesToString();
        final String r = responseBody;
        return r;
      } else if (response.statusCode == 404) {
        var responseBody = await response.stream.bytesToString();
        final String r = responseBody;
        return r;
      } else {
        print('ERROORRR!!!');
      }
    } catch (e, stackTrace) {
      print('Error no esperado: $e');
      print(stackTrace);
    }
  }

  Future<List<Usuario>?> getPacientesByPsicologo(int psicologoId) async {
    String url = "${BASE_URL}psicologo/$psicologoId/pacientes";

    try {
      var response = await http.get(Uri.parse(url), headers: {"Content-Type": "application/json"});

      if (response.statusCode == 200) {
        List<dynamic> responseBody = json.decode(response.body);
        List<Usuario> pacientes = responseBody.map((json) => Usuario.fromJson(json)).toList();
        return pacientes;
      } else {
        print('Error al obtener pacientes: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('Error inesperado: $e');
      return null;
    }
  }
}

)

especialista_service.dart:
(
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:psicoapp/configs/constants.dart'; // Configuración de URL base
import 'package:psicoapp/models/especialista.dart'; // Modelo de Especialista

class EspecialistaService {
  // Método para crear un especialista
  Future<Especialista?> createEspecialista(String especialidad, int idPsicologoGeneral) async {
    String url = "${BASE_URL}especialistas";  // Ruta del endpoint de especialistas

    try {
      var response = await http.post(
        Uri.parse(url),
        headers: {"Content-Type": "application/json"},
        body: jsonEncode({
          "especialidad": especialidad,
          "PsicologoGeneral_id_psicologogeneral": idPsicologoGeneral,  // Enviar el id del PsicologoGeneral.
        }),
      );

      if (response.statusCode == 201) {
        var responseBody = json.decode(response.body);
        return Especialista.fromJson(responseBody);  // Crear instancia de Especialista desde la respuesta
      } else {
        print('Error al crear el especialista: ${response.statusCode} - ${response.body}');
        return null;
      }
    } catch (e) {
      print('Error no esperado: $e');
      return null;
    }
  }
}

)

paciente_service.dart:
(
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:psicoapp/configs/constants.dart';
import 'package:psicoapp/models/Paciente.dart'; // Modelo de Paciente

class PacienteService {
  Future<Paciente?> getPacienteByUsuarioId(int usuarioId) async {
    String url = "${BASE_URL}pacientes/$usuarioId"; // Endpoint para obtener el paciente por usuarioId

    try {
      var response = await http.get(
        Uri.parse(url),
        headers: {"Content-Type": "application/json"},
      );

      if (response.statusCode == 200) {
        var responseBody = json.decode(response.body);
        return Paciente.fromJson(responseBody); // Devuelve el objeto Paciente
      } else {
        print('Error al obtener el paciente: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('Error no esperado: $e');
      return null;
    }
  }
}

)

solicitarcita_service.dart:
(
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:psicoapp/configs/constants.dart';

class CitaService {
  Future<bool> createCita(int pacienteId, DateTime fechaHora, String motivo) async {
    // Convierte la fecha a formato ISO si es necesario
    String fechaHoraString = fechaHora.toIso8601String();
    String url = "${BASE_URL}citas";

    // Enviar solicitud POST para crear la cita
    var response = await http.post(
      Uri.parse(url),
      headers: {"Content-Type": "application/json"},
      body: jsonEncode({
        "pacienteId": pacienteId, // Enviar el ID del paciente al backend
        "fechaHora": fechaHoraString,
        "motivo": motivo,
      }),
    );

      if (response.statusCode == 201) {
        return true;
      } else {
        print('Error: ${response.body}'); // Muestra el error en la consola
        return false;
      }

  }

  Future<bool> updateCita(int citaId, int pacienteId, DateTime fechaHora, String motivo) async {
    String fechaHoraString = fechaHora.toIso8601String();
    String url = "${BASE_URL}citas/$citaId"; // Usamos el ID de la cita para la actualización

    // Enviar solicitud PUT para actualizar la cita
    var response = await http.put(
      Uri.parse(url),
      headers: {"Content-Type": "application/json"},
      body: jsonEncode({
        "pacienteId": pacienteId,
        "fechaHora": fechaHoraString,
        "motivo": motivo,
      }),
    );

    if (response.statusCode == 200) { // 200 significa que la actualización fue exitosa
      return true;
    } else {
      print('Error: ${response.body}');
      return false;
    }
  }

  
}

)
